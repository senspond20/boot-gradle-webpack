plugins {
    id 'org.springframework.boot' version '2.7.4'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'java'
}

group = 'com.rgbitsoft'
version = '1.0'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
//    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
//    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'org.springframework.security:spring-security-test'


}

tasks.named('test') {
    useJUnitPlatform()
}
def webappDir = "$projectDir/src/main/webapp"

sourceSets {
    main {
        resources {
            srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"]
        }
    }
}
processResources{
   dependsOn "frontendBuildProcess"
}

def staticReactPath = "$projectDir/src/main/resources/static/react"
def isWindows = System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows');

task frontendBuildProcess(){
//    delete staticPath
//    doLast {
//        file(staticPath).mkdir()
//    }
    dependsOn "npmInstall"
    dependsOn "npmBuild"
}

task cleanStatic(type : Delete){
    delete staticReactPath
    doLast {
        file(staticReactPath).mkdir()
    }
}

task npmBuild(type: Exec){
    group = BasePlugin.BUILD_GROUP

    if (isWindows) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }
}

task npmInstall(type: Exec) {
    group = BasePlugin.BUILD_GROUP
    if (isWindows) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine 'npm.cmd', 'install'
    } else {
        commandLine "npm", "audit", "fix"
        commandLine 'npm', 'install'
    }
}

//task frontdev(type: Exec){
//    group = BasePlugin.BUILD_GROUP
//    if (isWindows) {
//        commandLine "npm.cmd", "run-script", "dev"
//    } else {
//        commandLine "npm", "run-script", "dev"
//    }
//}
